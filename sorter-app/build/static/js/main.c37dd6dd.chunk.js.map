{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","selectedFile","onFileChange","event","setState","target","files","onFileUpload","formData","FormData","append","name","console","log","axios","post","fileData","type","lastModifiedDate","toDateString","className","src","async","data-anvil-embed","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAiHeA,E,4MA3GXC,MAAQ,CAENC,aAAc,M,EAKhBC,aAAe,SAAAC,GAEb,EAAKC,SAAS,CAAEH,aAAcE,EAAME,OAAOC,MAAM,M,EAInDC,aAAe,WAEb,IAAMC,EAAW,IAAIC,SAGrBD,EAASE,OACP,SACA,EAAKV,MAAMC,aACX,EAAKD,MAAMC,aAAaU,MAI1BC,QAAQC,IAAI,EAAKb,MAAMC,cAIvBa,IAAMC,KAAK,yBAA0BP,I,EAIvCQ,SAAW,WAET,OAAI,EAAKhB,MAAMC,aAkBX,gCACE,+CACA,4CAAe,EAAKD,MAAMC,aAAaU,QACvC,4CAAe,EAAKX,MAAMC,aAAagB,QACvC,+CACiB,IACd,EAAKjB,MAAMC,aAAaiB,iBAAiBC,qBAQ9C,gCACE,uBACA,8E,4CAMR,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,kDACA,2EAGE,4DAIF,gdAOA,iOAIA,wBAAQC,IAAI,+BAA+BC,OAAK,IAChD,wBAAQF,UAAU,QAAQG,oBAAA,EAAiBF,IAAI,yE,GArGzCG,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c37dd6dd.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends Component{\n\n    state = {\n      //at first, no file is selected\n      selectedFile: null,\n      //source: null,\n    };\n    \n    // on file select (from the pop up)\n    onFileChange = event => {\n      // update state\n      this.setState({ selectedFile: event.target.files[0] });\n    };\n\n    // on file upload (click upload button)\n    onFileUpload = () => {\n  \n      const formData = new FormData();\n    \n      // update the formData object\n      formData.append(\n        \"myFile\",\n        this.state.selectedFile,\n        this.state.selectedFile.name\n      );\n    \n      // log details\n      console.log(this.state.selectedFile);\n    \n      // Request made to the backend api\n      // Send formData object\n      axios.post(\"https://10.0.2.2:3000/\", formData);\n    };\n\n    // conditional render based on whether file was chosen\n    fileData = () => {\n    \n      if (this.state.selectedFile) {\n        // axios\n        // .get(\n        //   'api/uploadfile',\n        //   { responseType: 'arraybuffer' },\n        // )\n        // .then(response => {\n        //   const base64 = btoa(\n        //     new Uint8Array(response.data).reduce(\n        //       (data, byte) => data + String.fromCharCode(byte),\n        //       '',\n        //     ),\n        //   );\n        //   this.setState({ source: \"data:;base64,\" + base64 });\n        //   console.log(this.state.source);\n        // });\n         \n        return (\n          <div>\n            <h2>File Details:</h2>\n            <p>File Name: {this.state.selectedFile.name}</p>\n            <p>File Type: {this.state.selectedFile.type}</p>             \n            <p>\n              Last Modified:{\" \"}\n              {this.state.selectedFile.lastModifiedDate.toDateString()}\n            </p>\n            {/*<img src={this.state.source} alt=\"file\"/>*/}\n          </div>\n        );\n      } else {\n\n        return (\n          <div>\n            <br />\n            <h4>Choose before Pressing the Upload button</h4>\n          </div>\n        );\n      }\n    };\n\n    render(){\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h2>Recycling Sorter</h2>\n            <h3>\n            Deep Learning Track Team 13 Final Project\n              </h3>\n              <h3>\n              MIT SureStart Program 2021\n              \n            </h3>\n            <p>Upload an image below and our model will analyze it to determine which type of \n              recyclable it is (if it is recyclable). Your image will fed directly to the model that we developed\n              and the model's classification will be displayed on the screen. This website is just a demo \n              of the software; the goal is to use this software as part of a physical device that can be used in offices \n              and schools to automatically sort types of recycling.\n            </p>\n\n            <p>Please note that this model runs at about 70% accuracy, so there occasionally may be errors. If \n              you would like to upload another image, please refresh the page and then upload the other image.\n            </p>\n\n            <script src=\"https://anvil.works/embed.js\" async></script>\n            <iframe className=\"anvil\" data-anvil-embed src=\"https://KQMAGRBRPASIOOAM.anvil.app/L6W5CCGZBZOHCGJUCZZ3ECB7\"></iframe>\n          </header>\n        </div>\n      );\n    }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}